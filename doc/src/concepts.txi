@node Concepts
@chapter Concepts

Once multiple vehicles are loaded into the game, Dglc0 simulates them until only one remains. This chapter discusses exactly how Dgcl0 performs this simulation.

You can think of the algorithms used by Dgcl0 as the physical laws of the game world it simulates. The game world does not pretend to be anything like our own world, so it needs an entire chapter dedicated to explaning it.

In other games, this information might be found in community-maintained wikis. You can think of this chapter as Dgcl0's wiki.

@c some sub-nodes

@c here's the actual information, disorganized:

==

This section describes the coordinate system used in Dgcl0.

The game takes place on an infinite 2-dimentional grid with integer-pair coordinates. Here's a picture:

@verbatim
 . . .-3 . . .
 . . .-2 . . .
 . . .-1 . . .
-3-2-1 0 1 2 3
 . . . 1 . . .
 . . . 2 . . .
 . . . 3 . . .
@end verbatim

Notice that the larger y-coordinates are towards the bottom of the page. Coordinates in Dgcl0 take the form of (y, x).

For example, in the picture below, the asterisk is at position (2, 1), and the plus sign is at position (-3, -2). The dots are ommitted for visibility.

@verbatim
      -3
 +    -2
      -1
-3-2-1 0 1 2 3
       1
       2 *
       3
@end verbatim

Too sum up this section: Dgcl0 takes place on a 2D Cartesian grid.

==

Lisp function objects can occupy positions on the grid. A function object associated with a grid coordinate is called a @dfn{node}.

Nodes can be @dfn{connected} to other nodes. Connected nodes must be adjacent. Not every pair of adjacent nodes are connected. A collection of one or more interconnected nodes is called a @dfn{vehicle}.

In every vehicle, exactly one node is said to be the @dfn{top-level node}. Top-level nodes are special nodes involved in simulating the vehicle. The next section discusses them in depth.

Once every step of the simulation, Dgcl0 passes control to every vehicle by calling every vehicle's top-level node.

Once control has entered a vehicle, the vehicle will probably want to take an action within the game world. This is done through Dgcl0's driver call api. "Driver call" is usually abbreviated to @dfn{drcall}. See Drcalls for a list of actions nodes can take.

When a node invokes a drcall, Dgcl0 magically knows the position of the calling node. Dgcl0 remembers which node calls which drcall. If a node ever tries to call a different drcall, then the node is destroyed. There are some exceptions to this rule, like the @code{neighbor} function.

If control is ever passed from node to node via regular function calls, Dgcl0 cannot know which node calls which drcall. Instead, vehicle designers should pass control from node to node with the @code{neighbor} drcall. This drcall is one of the exceptions to the destruction rule above.
